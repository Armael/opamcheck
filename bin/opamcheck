#!/bin/bash

# usage: opamcheck <version>

# build and install OCaml <version> and camlp4 <version>

# take the package list from etc/all-packages
# install all the packages except the ones listed in etc/exclude-packages
# log all output to log/opamcheck/<version>-<date>-packages
# log all failures to log/opamcheck/<version>-<date>-fail

usage_string='usage: opamcheck [options] version'
function usage () {
    echo "$usage_string" >&2
    exit 2
}

function help () {
    echo "$usage_string"
    echo 'options are:'
    echo '  -help/--help   display this help message'
    echo '  -init          stop after initialization'
    echo '  -param x=v,... append to OCAMLPARAM (default warn-error=a)'
    echo '  -remove        test removal and reinstallation of each package'
    echo '  -resume        resume a stopped run'
    echo '  -scratch       reinitialize before each package'
}

if [[ "$OPAMCHECKDIR" = "" ]]; then
    echo 'error: the variable OPAMCHECKDIR is not set' >&2
    exit 2
fi

. "$OPAMCHECKDIR/bin/opamcheck-colors"

initonly=false
addparams=warn-error=a
testremove=false
resume=false
fromscratch=false
vers=

while [[ $# > 0 ]]; do
    case $1 in
        -help|--help) help; exit 0;;
        -init) initonly=true;;
        -param) addparams="$2"; shift;;
        -remove) testremove=true;;
        -resume) resume=true;;
        -scratch) fromscratch=true;;
        -*) usage;;
        *) vers="$1";;
    esac
    shift
done
if [[ -z "$vers" ]]; then usage; fi

export OPAMCHECKVERSION="$vers"         # communicate to opamcheck-opam
cd "$OPAMCHECKDIR"
logs="$OPAMCHECKDIR/log/opamcheck/$vers-$(date +%Ft%T)"

if [[ "$addparam" != "" ]]; then
    export OCAMLPARAM="${OCAMLPARAM:-_},$addparam"
fi

if $initonly; then touch control/stop-$vers; fi

function clear_line () {
    printf '\r%78s\r' ''
}

# print_result <result> <color> <newline>
function print_result () {
    clear_line >&3
    printf " %4d/%-4d %s $2 %s $end$3" \
           $curr $total "$pack" "$1" >&3
}

function launch () {
    printf '\n$$$$$$$$$$ %s\n\n' "$1"
    eval "$1" </dev/null
}

export PATH="$OPAMCHECKDIR/bin:$OPAMCHECKDIR/install/$vers/bin:$PATH"

if ! [ -f etc/all-packages ]; then
    echo 'warning: copying default list to etc/all-packages'
    cp etc/all-packages-default etc/all-packages
    echo 'you should probably do:'
    echo '  opamcheck-opam list -a | sed -e 1d -e "/^base-/d" -e "s/ .*//"' \
         '>etc/all-packages'
fi
if ! [ -f etc/exclude-packages ]; then
    echo 'warning: copying default list to etc/exclude-packages'
    cp etc/exclude-packages-default etc/exclude-packages
fi

if ! $resume; then
  printf 'compiling and installing OCaml %s...' "$vers"
  (
      mkdir -p $OPAMCHECKDIR/install/$vers
      if ! [ -e $OPAMCHECKDIR/install/$vers/src ]; then
          ln -s ../../ocaml/$vers $OPAMCHECKDIR/install/$vers/src
      fi
      cd ocaml/$vers
      touch config/Makefile
      make distclean
      if [ -f ./opamcheck-configargs ]; then
          ./configure -prefix "$OPAMCHECKDIR/install/$vers" \
              $(< opamcheck-configargs)
      else
          ./configure -prefix "$OPAMCHECKDIR/install/$vers"
      fi
      make world.opt && make install
  ) >"$logs-install-ocaml" 2>&1
  case $? in
      0) printf 'done\n';;
      *) printf 'failed\n'
          echo "see $logs-install-ocaml for details"
          exit 3;;
  esac

  printf 'compiling and installing camlp4...'
  (
      cd camlp4
      if [ ! -d "$vers" ]; then
          cp -R default "$vers"
      fi
      cd $vers
      make distclean
      if [ -f ./opamcheck-configargs ]; then
          ./configure $(< opamcheck-configargs)
      else
          ./configure
      fi
      make all && make install
  ) >"$logs-install-camlp4" 2>&1
  case $? in
      0) printf 'done\n';;
      *) printf 'failed\n'
          echo "see $logs-install-camlp4 for details"
          exit 3;;
  esac

  cp -f etc/all-packages tmp/doing.$vers
  rm -f tmp/todo.$vers
  pass=1
  clear_line
  printf '==== reinit OPAM (pass %d)\n' $pass
  opamcheck-reinit >>$logs-packages 2>&1 </dev/null || {
      echo opamcheck-reinit failed
      exit 3
  }
  if ! $fromscratch; then rm -f batches/batch-$vers-*; fi
else
  echo resuming run >>$logs-packages 2>&1
  echo resume previous run
fi

total=$(wc -l <tmp/doing.$vers)
curr=1

while [ -s tmp/doing.$vers ]; do
  first=$curr
  touch tmp/todo.$vers
  while read pack ignore; do
    if [[ "$pack" = '#' ]]; then continue; fi
    if [ -f control/stop-$vers ]; then
        echo stopped by user request "(`date`)"
        clear_line >&3
        echo 'stopped by user request' >&3
        rm control/stop-$vers
        break 2
    fi
    while [ -f control/suspend-$vers ]; do
        clear_line >&3
        printf "%s suspended by user request\r" "$(date)" >&3
        sleep 30
    done
    printf '\n##################### %s\n\n' "$pack"
    print_result check '' '\r'
    if grep -q "^$pack " etc/exclude-packages; then
        printf "%s is in the exclude list\n" "$pack"
        curr=$(($curr + 1))
        continue
    fi
    if $fromscratch; then
        print_result reinit '' '\r'
        launch opamcheck-reinit
    else
        echo n | opamcheck-opam install --dry-run $pack >tmp/dry-run.$vers 2>&1
        dry_result=$?
        cat tmp/dry-run.$vers; echo
        echo "result code from dry-run: $dry_result"
        case $dry_result in
            0)
                if sed -e /^=/q tmp/dry-run.$vers \
                    | grep '^[^a-z]* \(upgrade\|downgrade\|recompile\|remove\) ' \
                           >/dev/null 2>&1
                #sed -e '/^The follow/d' -e '/^[^a-z]* install /d' -e '/^$/d' \
                #    -e /^=/q tmp/dry-run.$vers >tmp/dry-run.$vers-filt
                #if [[ $(wc -l <tmp/dry-run.$vers-filt) != 1 ]]
                then
                    #print_result $dry_result "$cyan" '\n'
                    echo "postpone $pack (upgrade/downgrade/recompile/remove)"
                    echo $pack >>tmp/todo.$vers
                    continue
                fi;;
            3)  # not compatible with currently installed
                #print_result $dry_result "$cyan" '\n'
                echo "postpone $pack (incompatible with current packages)"
                echo $pack >>tmp/todo.$vers
                continue;;
            66) # not available
                print_result $dry_result "$yellow" '\n'
                echo "give up on $pack (not available)"
                echo $dry_result $pack >>$logs-fail
                continue;;
            *)  printf 'unexpected result from dry run: %d\n' $dry_result >&3
                print_result $dry_result "$black" '\n'
                echo "give up on $pack (unexpected result from dry run)"
                echo $pack >>tmp/todo.$vers
                continue;;
        esac
    fi
    launch 'opamcheck-opam switch export -'
    print_result install '' '\r'
    launch "opamcheck-opam install -y $pack"
    result=$?
    case $result in
        0) color=""; newline='\r'; dolog=false;;
        *) color="$pink"; newline='\n'; dolog=true;;
    esac
    print_result $result "$color" $newline
    if $dolog; then echo $result $pack >>$logs-fail; fi
    if $testremove && [[ $result = 0 ]]; then
        print_result remove '' '\r'
        launch "opamcheck-opam remove -y $pack"
        remresult=$?
        print_result reinstall '' '\r'
        launch "opamcheck-opam install -y $pack"
        result=$?
        case $remresult/$result in
            0/0) print_result 0/0 '' '\r';;
            *)  print_result $remresult/$result "$pink" '\n'
                echo $remresult/$result $pack >>$logs-fail
                ;;
        esac
    fi
    curr=$(($curr + 1))
  done < tmp/doing.$vers
  echo
  if [ $curr -eq $first ]; then break; fi
  if ! $fromscratch; then
      opamcheck-opam switch export batches/batch-$vers-$(printf "%03d" $pass)
  fi
  mv -f tmp/todo.$vers tmp/doing.$vers
  if ! [ -s tmp/doing.$vers ]; then break; fi
  pass=$(($pass + 1))
  clear_line >&3
  printf '==== reinit OPAM (pass %d, %d/%d)\n' \
         $pass $curr $total >&3
  opamcheck-reinit </dev/null
done 3>&1 >>$logs-packages 2>&1
clear_line
echo 'opamcheck done'
