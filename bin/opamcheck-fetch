#!/bin/sh

# For use with opam:
# OPAMFETCH='opamcheck-fetch [-force|-add] %{url}% %{out}% %{checksum}%'

# command-line usage:
# opamcheck-fetch [-force|-add] url [out [checksum]]

cachedir=$OPAMCHECKDIR/curl-cache
log="$cachedir/@log"
printf "%s command line: %s\n" "`date +'%F %T'`" "$*" >>"$log"

force_dload=false
addcache=false
case $1 in
    -force) force_dload=true; shift;;
    -add) addcache=true; shift;;
esac

case $# in
    0) echo 'usage: opamcheck-fetch [-force] url [out [checksum]]' >&2
       echo 'or   : opamcheck-fetch -add file...' >&2
       exit 2;;
esac

url="$1"
out="$2"
: ${out:=$(basename "$url")}
checksum="$3"

trap 'rm -f "$cachedir"/tmp.$$.*' EXIT

. "$OPAMCHECKDIR/bin/opamcheck-colors"

shortcut="$cachedir/checksums/$checksum"
index="$cachedir/$url"

# usage: report {DOWNLOAD|CACHED} <result>
report () {
    case $2 in
        0) result=OK;;
        *) result="$red FAIL($2) $end";;
    esac
    case $1 in
        CACHED) action=CACHED;;
        *) action="$yellow $1 $end";;
    esac
    case "$action $result" in
        'CACHED OK') ;;
        *) printf "\ropamcheck-fetch: $action $result %s\n" "$url" >/dev/tty;;
    esac
}

# usage: md5 <file>
md5 () {
    md5sum "$1" | sed -e 's/ .*//'
}

# usage: download (uses $url, $out, $index)
download () {
    baseout="$(basename "$out")"
    (
        cd "$cachedir"
        curl -L -k -w '%{http_code}\n' "$url" -o tmp.$$.file \
            >tmp.$$.out 2>tmp.$$.err
        echo $? >tmp.$$.resultcode
        realcsum=$(md5 tmp.$$.file)
        mv -f tmp.$$.file checksums/$realcsum
        mkdir -p "$index/files"
        rm -f "$index/files/$baseout"
        ln -sf "$cachedir/checksums/$realcsum" "$index/files/$baseout"
        mv -f tmp.$$.out "$index/stdout"
        mv -f tmp.$$.err "$index/stderr"
        mv -f tmp.$$.resultcode "$index/resultcode"
    )
}

if $addcache; then
    for f in "$@"; do
        realcsum=$(md5 "$f")
        if [ -f "$cachedir/checksums/$realcsum" ]; then
            echo "$realcsum ALREADY CACHED" >&2
        else
            echo "$realcsum <- $f" >&2
            cp "$f" "$cachedir/checksums/$realcsum"
            chmod a-w "$cachedir/checksums/$realcsum"
        fi
    done

elif $force_dload; then
     download
     report DOWNLOAD $(< $index/resultcode )
     exit $(< $index/resultcode )

else
    if [[ -n "$checksum" && -f "$shortcut" ]]; then
        cp "$shortcut" "$out"
        echo 200
        report CACHED 0
        exit 0
    fi
    if [[ -f "$index/stdout" ]]; then
        if [ x$(< $index/stdout) = x200 ]; then
            cp "$index/files/"* "$out"
            cat "$index/stdout"
            cat "$index/stderr" >&2
            report CACHED 0
            exit $(< "$index/resultcode")
        else
            report CACHED .$(< "$index/resultcode")
            exit $(< "$index/resultcode")
        fi
    fi
    download
    if [[ -n "$checksum" ]]; then
        if [[ -f "$shortcut" ]]; then
            cp "$shortcut" "$out"
            echo 200
            report DOWNLOAD 0
            exit 0
        else
            report DOWNLOAD wrong_checksum
            exit 2
        fi
    else
        report DOWNLOAD $(< "$index/resultcode")
        exit $(< "$index/resultcode")
    fi
fi
