#!/bin/sh

# For use with opam:
# OPAMFETCH='opamcheck-fetch [-force|-add] %{url}% %{out}% %{checksum}%'

# command-line usage:
# opamcheck-fetch [-force|-add] url [out [checksum]]

cachedir=$OPAMCHECKDIR/curl-cache
log="$cachedir/@log"
printf "%s command line: %s\n" "`date +'%F %T'`" "$*" >>"$log"

force_dload=false
addcache=false
case $1 in
    -force) force_dload=true; shift;;
    -add) addcache=true; shift;;
esac

case $# in
    0) echo 'usage: opamcheck-fetch [-force] url [out [checksum]]' >&2
       echo 'or   : opamcheck-fetch -add file...' >&2
       exit 2;;
esac

url="$1"
out="$2"
: ${out:=$(basename "$url")}
checksum="$3"

trap 'rm -f "$cachedir"/tmp.$$.*' EXIT

. "$OPAMCHECKDIR/bin/opamcheck-colors"

shortcut="$cachedir/checksums/$checksum"
index="$cachedir/$url"

if $addcache; then
    for f in "$@"; do
        realcsum=$(md5sum "$f" | sed -e 's/ .*//')
        if [ -f "$cachedir/checksums/$realcsum" ]; then
            echo "$realcsum ALREADY CACHED" >&2
        else
            echo "$realcsum <- $f" >&2
            cp "$f" "$cachedir/checksums/$realcsum"
            chmod a-w "$cachedir/checksums/$realcsum"
        fi
    done
    exit 0
elif $force_dload || [ ! -f "$shortcut" -a ! -f "$index/stdout" ]; then
    action="$yellow DOWNLOAD $end"
    (
        cd "$cachedir"
        curl -L -k -w '%{http_code}\n' "$url" -o tmp.$$.file \
            >tmp.$$.out 2>tmp.$$.err
        echo $? >tmp.$$.resultcode
        realcsum=$(md5sum tmp.$$.file | sed -e 's/ .*//')
        mv -f tmp.$$.file checksums/$realcsum
        mkdir -p "$index/files"
        rm -f "$index/files/$(basename $out)"
        ln -sf "$cachedir/checksums/$realcsum" "$index/files/$(basename $out)"
        mv -f tmp.$$.out "$index/stdout"
        mv -f tmp.$$.err "$index/stderr"
        mv -f tmp.$$.resultcode "$index/resultcode"
    )
else
    action="CACHED"
fi

if [ -f "$shortcut" ]; then
    status="$action OK"
    cp "$shortcut" "$out"
    echo 200
    result=0
elif [ x$(< $index/stdout) = x200 ]; then
    status="$action OK"
    cp "$index/files/"* "$out"
    cat "$index/stdout"
    cat "$index/stderr" >&2
    result=$(< "$index/resultcode")
else
    status="$action $red FAIL $end"
    result=$(< "$index/resultcode")
fi

case $status in
    "CACHED OK");;
    *) printf "\ropamcheck-fetch: $status %s\n" "$url" >/dev/tty;;
esac

exit $result
