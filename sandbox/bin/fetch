#!/bin/bash

# usage : fetch <md5> <url> <out>
#         fetch -refresh <url>

SB="$OPCSANDBOX"
TMPDIR="$SB/fetch-cache/tmp"
TMP="$TMPDIR/$$"
LOGFILE="$SB/log.txt"
MDDIR="$SB/fetch-cache/md5"
URLDIR="$SB/fetch-cache/url"
BIN="$SB/bin"

function log () {
    printf "fetch: "
    printf "$@"
}

function index () {
    D1=${1%??????????????????????????????}
    X=${1#??}
    D2=${X%????????????????????????????}
    mkdir -p "$MDDIR/$D1/$D2"
    echo "$MDDIR/$D1/$D2/$1"
}

function do_fetch () {
    # usage do_fetch <url>
    log "fetching %s\n" "$1"
    "$BIN"/realcurl -k -L "$1" -o "$TMP"
    MD5=$(md5 <"$TMP")
    log "got rc:%d md5:%s\n" $? $MD5
    MDFILE=$(index $MD5)
    mv "$TMP" "$MDFILE"
    mkdir -p "$URLDIR/$1"
    ln -s "$MDFILE" "$URLDIR/$1/file"
}

function usage () {
    echo 'usage : fetch <md5> <url> <out>' >&2
    echo 'or      fetch -refresh <url>' >&2
    exit 1
}

mkdir -p "$TMPDIR" "$MDDIR" "$URLDIR"

case $1 in
    -refresh)
        exec >>"$LOGFILE" 2>&1
        log "# fetch $*"
        do_fetch "$2"
        ;;
    *)
        if [[ $# -ne 3 ]]; then usage; fi
        exec >>"$LOGFILE" 2>&1
        log "# fetch $*"
        MDFILE="$(index "$1")"
        URLFILE="$URLDIR/$2/file"
        if [[ -f "$MDFILE" ]]; then
            cp "$MDFILE" "$3"
        elif [[ -f "$URLFILE" ]]; then
            log "wrong md5: req:%s cache:%s for %s\n" "$1" $(md5 <"$URLFILE") \
                "$2"
            cp "$URLFILE" "$3"
        else
            do_fetch "$2"
            cp "$URLFILE" "$3"
        fi
        ;;
esac
